name: Extract Samsung Super.img Partitions

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: "رابط الملف المضغوط .zip الذي يحتوي على AP.tar.md5"
        required: true
      partitions_to_extract:
        description: "المفات المطلوبة (افصلها بمسافات، مثال: system vendor)"
        required: false
        default: "system vendor"
      extract_all:
        description: "استخراج جميع المفات؟"
        type: choice
        options:
        - "no"
        - "yes"
        default: "no"

jobs:
  extract-partitions:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Check disk space
      run: |
        echo "💾 Disk space before starting:"
        df -h

    - name: Install essential tools only
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          unzip \
          curl \
          lz4 \
          android-sdk-libsparse-utils

    - name: Determine partitions to extract
      run: |
        if [ "${{ github.event.inputs.extract_all }}" = "yes" ]; then
          echo "🔧 Will extract ALL partitions"
          TARGET_PARTITIONS="system vendor product odm prism optics system_ext"
        elif [ -n "${{ github.event.inputs.partitions_to_extract }}" ]; then
          echo "🔧 Will extract specific partitions: ${{ github.event.inputs.partitions_to_extract }}"
          TARGET_PARTITIONS="${{ github.event.inputs.partitions_to_extract }}"
        else
          echo "🔧 Using default partitions: system vendor"
          TARGET_PARTITIONS="system vendor"
        fi
        
        echo "TARGET_PARTITIONS=$TARGET_PARTITIONS" >> $GITHUB_ENV
        echo "✅ Partitions to extract: $TARGET_PARTITIONS"

    - name: Download and extract step by step
      run: |
        mkdir -p /tmp/firmware
        cd /tmp/firmware
        
        curl -L -o firmware.zip "${{ github.event.inputs.zip_url }}"
        echo "📦 Downloaded file:"
        ls -lh firmware.zip

    - name: Extract ZIP and find AP file
      run: |
        cd /tmp/firmware
        unzip -o firmware.zip -d extracted_zip/
        rm -f firmware.zip
        
        AP_FILE=$(find extracted_zip/ -name "AP*.tar.md5" | head -1)
        if [ -n "$AP_FILE" ]; then
          cp "$AP_FILE" ap_file.tar.md5
          echo "✅ Found AP file"
        else
          echo "❌ ERROR: No AP file found"
          exit 1
        fi
        rm -rf extracted_zip/

    - name: Extract AP and find super.img
      run: |
        cd /tmp/firmware
        tar -xf ap_file.tar.md5
        rm -f ap_file.tar.md5
        
        if [ ! -f "super.img.lz4" ]; then
          SUPER_FILE=$(find . -name "super.img.lz4" | head -1)
          if [ -n "$SUPER_FILE" ]; then
            cp "$SUPER_FILE" super.img.lz4
          else
            echo "❌ ERROR: No super.img.lz4 found"
            exit 1
          fi
        fi

    - name: Decompress LZ4
      run: |
        cd /tmp/firmware
        lz4 -d super.img.lz4 super.img.sparse
        rm -f super.img.lz4

    - name: Convert to raw image
      run: |
        cd /tmp/firmware
        simg2img super.img.sparse super.img.raw
        rm -f super.img.sparse

    - name: Download reliable extraction tool
      run: |
        cd /tmp/firmware
        # تنزيل أداة موثوقة لاستخراج المفات
        curl -s -O https://raw.githubusercontent.com/anestisb/android-simg2img/master/simg2img.py
        curl -s -O https://raw.githubusercontent.com/anestisb/android-simg2img/master/lpunpack.py
        chmod +x lpunpack.py

    - name: Extract partitions using lpunpack
      run: |
        cd /tmp/firmware
        mkdir -p partitions
        
        echo "🔧 Extracting partitions using lpunpack..."
        python3 lpunpack.py super.img.raw partitions/
        
        echo "📂 All partitions found:"
        ls -la partitions/

    - name: Filter requested partitions only
      run: |
        cd /tmp/firmware/partitions
        
        echo "🔧 Filtering partitions. Keeping only: $TARGET_PARTITIONS"
        
        # حفظ المفات المطلوبة وحذف البقية
        for partition in *.img; do
          partition_name=$(basename "$partition" .img)
          if echo "$TARGET_PARTITIONS" | grep -qw "$partition_name"; then
            echo "✅ Keeping: $partition"
          else
            echo "🗑️ Deleting: $partition"
            rm -f "$partition"
          fi
        done
        
        echo "📂 Partitions after filtering:"
        ls -la *.img 2>/dev/null || echo "No partitions found after filtering"

    - name: Verify requested partitions exist
      run: |
        cd /tmp/firmware/partitions
        
        echo "🔍 Verifying requested partitions:"
        ALL_FOUND=true
        for part in $TARGET_PARTITIONS; do
          if [ -f "${part}.img" ]; then
            echo "✅ Found: ${part}.img"
            ls -lh "${part}.img"
          else
            echo "❌ Missing: ${part}.img"
            ALL_FOUND=false
          fi
        done
        
        if [ "$ALL_FOUND" = "false" ]; then
          echo "⚠️  Some requested partitions were not found"
          echo "📋 Available partitions:"
          ls -la *.img 2>/dev/null || echo "No partitions available"
        fi

    - name: Cleanup super image
      run: |
        cd /tmp/firmware
        rm -f super.img.raw
        echo "💾 Space after cleanup:"
        df -h

    - name: Compress selected partitions
      run: |
        cd /tmp/firmware/partitions
        
        echo "🔧 Compressing requested partitions: $TARGET_PARTITIONS"
        COMPRESSED_COUNT=0
        for part in $TARGET_PARTITIONS; do
          if [ -f "${part}.img" ]; then
            echo "📦 Compressing ${part}.img"
            gzip -1 -c "${part}.img" > "${part}.img.gz"
            rm -f "${part}.img"
            ls -lh "${part}.img.gz"
            COMPRESSED_COUNT=$((COMPRESSED_COUNT + 1))
          fi
        done
        
        if [ $COMPRESSED_COUNT -eq 0 ]; then
          echo "⚠️  No requested partitions were found to compress"
          echo "📋 Available files:"
          ls -la
        else
          echo "✅ Successfully compressed $COMPRESSED_COUNT partitions"
        fi

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: samsung-partitions
        path: /tmp/firmware/partitions/*.gz
        retention-days: 1
        if-no-files-found: warn

    - name: Final cleanup
      run: |
        rm -rf /tmp/firmware/
        echo "🧹 Cleanup completed"

    - name: Success message
      run: |
        echo "✅ العملية اكتملت بنجاح!"
        echo "📥 يمكنك تحميل الملفات من قسم Artifacts"
        echo "🔧 المفات المطلوبة: $TARGET_PARTITIONS"