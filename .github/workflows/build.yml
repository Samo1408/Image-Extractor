name: Extract Samsung Partitions with Release

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: "رابط الملف المضغوط .zip الذي يحتوي على AP.tar.md5"
        required: true
      partitions_to_extract:
        description: "المفات المطلوبة (افصلها بمسافات، مثال: system vendor)"
        required: false
        default: "system vendor"
      release_tag:
        description: "وسم الإصدار (مثال: v1.0.0)"
        required: true
        default: "v1.0.0"
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  extract-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check initial disk space
      run: |
        echo "💾 Initial disk space:"
        df -h

    - name: Install essential tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          unzip \
          curl \
          lz4 \
          android-sdk-libsparse-utils \
          python3

    - name: Download lpunpack.py
      run: |
        curl -s -O https://raw.githubusercontent.com/Samo1408/Image-Extractor/main/lpunpack.py
        echo "✅ lpunpack.py downloaded"

    - name: Set partition names and artifact name
      run: |
        if [ -n "${{ github.event.inputs.partitions_to_extract }}" ]; then
          TARGET_PARTITIONS="${{ github.event.inputs.partitions_to_extract }}"
          ARTIFACT_NAME=$(echo "$TARGET_PARTITIONS" | tr ' ' '-' | cut -c1-50)
        else
          TARGET_PARTITIONS="system vendor"
          ARTIFACT_NAME="system-vendor"
        fi
        
        if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
          RELEASE_TAG="${{ github.ref_name }}"
        else
          CLEAN_TAG=$(echo "${{ github.event.inputs.release_tag }}" | tr ' ' '-' | tr -cd '[:alnum:]-._')
          RELEASE_TAG="$CLEAN_TAG"
        fi
        
        echo "TARGET_PARTITIONS=$TARGET_PARTITIONS" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        
        echo "✅ Partitions to extract: $TARGET_PARTITIONS"
        echo "📁 Artifact name: $ARTIFACT_NAME"

    - name: Download and extract firmware
      run: |
        mkdir -p firmware
        cd firmware
        curl -L -o firmware.zip "${{ github.event.inputs.zip_url }}"
        echo "📦 Downloaded file"
        ls -lh firmware.zip

    - name: Extract ZIP and process AP file
      run: |
        cd firmware
        unzip -o firmware.zip -d extracted_zip/
        rm -f firmware.zip
        
        AP_FILE=$(find extracted_zip/ -name "AP*.tar.md5" | head -1)
        if [ -n "$AP_FILE" ]; then
          cp "$AP_FILE" ap_file.tar.md5
          echo "✅ Found AP file"
        else
          echo "❌ ERROR: No AP file found"
          exit 1
        fi
        rm -rf extracted_zip/

    - name: Extract AP and handle super.img
      run: |
        cd firmware
        tar -xf ap_file.tar.md5
        rm -f ap_file.tar.md5
        
        if [ -f "super.img.lz4" ]; then
          echo "✅ super.img.lz4 is ready"
        else
          SUPER_FILE=$(find . -type f -name "super.img.lz4" | head -1)
          if [ -n "$SUPER_FILE" ] && [ "$SUPER_FILE" != "./super.img.lz4" ]; then
            cp "$SUPER_FILE" super.img.lz4
            echo "✅ Found and copied super.img.lz4"
          else
            echo "❌ ERROR: No super.img.lz4 found"
            exit 1
          fi
        fi

    - name: Decompress and convert super.img
      run: |
        cd firmware
        lz4 -d super.img.lz4 super.img.sparse
        rm -f super.img.lz4
        simg2img super.img.sparse super.img.raw
        rm -f super.img.sparse
        echo "✅ super.img.raw ready"

    - name: Extract partitions using lpunpack
      run: |
        cd firmware
        mkdir -p partitions
        python3 ../lpunpack.py super.img.raw partitions/
        echo "📂 Partitions extracted:"
        ls -la partitions/

    - name: Filter requested partitions
      run: |
        cd firmware/partitions
        
        echo "🔧 Filtering partitions. Keeping only: $TARGET_PARTITIONS"
        
        for partition in *.img; do
          partition_name=$(basename "$partition" .img)
          if echo "$TARGET_PARTITIONS" | grep -qw "$partition_name"; then
            echo "✅ Keeping: $partition"
          else
            echo "🗑️ Deleting: $partition"
            rm -f "$partition"
          fi
        done

    - name: Compress partitions
      run: |
        cd firmware/partitions
        
        echo "🔧 Compressing partitions..."
        for part in $TARGET_PARTITIONS; do
          if [ -f "${part}.img" ]; then
            echo "📦 Compressing ${part}.img"
            gzip -1 -c "${part}.img" > "${part}.img.gz"
            rm -f "${part}.img"
            ls -lh "${part}.img.gz"
          fi
        done

    - name: Create final package with absolute path
      run: |
        cd firmware/partitions
        
        # استخدام مسار مطلق لتجنب الأخطاء
        FINAL_FILE="/tmp/$ARTIFACT_NAME-$RELEASE_TAG.tar.gz"
        
        if ls *.gz 1> /dev/null 2>&1; then
          echo "📦 Creating final package: $FINAL_FILE"
          tar -czf "$FINAL_FILE" ./*.gz
          echo "✅ Package created successfully"
          ls -lh "$FINAL_FILE"
          echo "FINAL_FILE=$FINAL_FILE" >> $GITHUB_ENV
          
          # نسخ الملف إلى المجلد الحالي كنسخة احتياطية
          cp "$FINAL_FILE" ./
          echo "BACKUP_FILE=$(pwd)/$ARTIFACT_NAME-$RELEASE_TAG.tar.gz" >> $GITHUB_ENV
        else
          echo "❌ No files to package"
          exit 1
        fi

    - name: Verify final file exists
      run: |
        echo "🔍 Verifying final files..."
        echo "المسار 1: $FINAL_FILE"
        echo "المسار 2: $BACKUP_FILE"
        
        if [ -f "$FINAL_FILE" ]; then
          echo "✅ Final file exists: $FINAL_FILE"
          echo "📊 Size: $(ls -lh $FINAL_FILE | awk '{print $5}')"
        else
          echo "❌ Final file not found at: $FINAL_FILE"
        fi
        
        if [ -f "$BACKUP_FILE" ]; then
          echo "✅ Backup file exists: $BACKUP_FILE"
        else
          echo "❌ Backup file not found"
        fi
        
        # البحث عن الملف في أي مكان
        FIND_FILE=$(find /tmp -name "$ARTIFACT_NAME-$RELEASE_TAG.tar.gz" 2>/dev/null | head -1)
        if [ -n "$FIND_FILE" ]; then
          echo "✅ Found file at: $FIND_FILE"
          echo "FINAL_FILE=$FIND_FILE" >> $GITHUB_ENV
        else
          echo "❌ File not found anywhere"
          echo "📁 /tmp contents:"
          ls -la /tmp/*.tar.gz 2>/dev/null || echo "No tar.gz files in /tmp"
        fi

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: "Partitions ${{ env.ARTIFACT_NAME }} - ${{ env.RELEASE_TAG }}"
        body: |
          Partitions Extracted: ${{ env.TARGET_PARTITIONS }}
          
          Generated automatically by GitHub Actions.
        draft: false
        prerelease: false

    - name: Upload to Release with verified path
      run: |
        UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
        UPLOAD_URL=$(echo $UPLOAD_URL | sed 's/{.*}//')
        echo "🔗 Upload URL: $UPLOAD_URL"
        
        # التأكد من وجود الملف
        if [ ! -f "$FINAL_FILE" ]; then
          echo "❌ File not found: $FINAL_FILE"
          echo "🔍 Searching for file..."
          FIND_FILE=$(find /tmp -name "$ARTIFACT_NAME-$RELEASE_TAG.tar.gz" 2>/dev/null | head -1)
          if [ -n "$FIND_FILE" ]; then
            echo "✅ Found file at: $FIND_FILE"
            FINAL_FILE="$FIND_FILE"
          else
            echo "❌ File not found anywhere, exiting"
            exit 1
          fi
        fi
        
        echo "📤 Uploading file: $FINAL_FILE"
        echo "📊 File size: $(ls -lh $FINAL_FILE | awk '{print $5}')"
        
        # الرفع باستخدام -T بدلاً من --data-binary
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          -H "Accept: application/vnd.github.v3+json" \
          -T "$FINAL_FILE" \
          "$UPLOAD_URL?name=$ARTIFACT_NAME-$RELEASE_TAG.tar.gz"
        
        echo "✅ تم الرفع بنجاح!"

    - name: Upload to Artifacts as backup
      uses: actions/upload-artifact@v4
      with:
        name: partitions-${{ env.ARTIFACT_NAME }}-${{ env.RELEASE_TAG }}
        path: ${{ env.FINAL_FILE }}
        retention-days: 7

    - name: Cleanup
      run: |
        rm -rf firmware
        rm -f lpunpack.py
        rm -f /tmp/*.tar.gz
        echo "🧹 تم التنظيف"

    - name: Success message
      run: |
        echo "🎉 العملية اكتملت بنجاح!"
        echo "🚀 تم الرفع إلى Releases: $ARTIFACT_NAME-$RELEASE_TAG"
        echo "📥 المفات المستخرجة: $TARGET_PARTITIONS"
        echo "📎 رابط الRelease: https://github.com/$GITHUB_REPOSITORY/releases/tag/$RELEASE_TAG"