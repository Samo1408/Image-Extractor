name: Extract Samsung Partitions with Release

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: "ÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ∂ÿ∫Ÿàÿ∑ .zip ÿßŸÑÿ∞Ÿä Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ AP.tar.md5"
        required: true
      partitions_to_extract:
        description: "ÿßŸÑŸÖŸÅÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© (ÿßŸÅÿµŸÑŸáÿß ÿ®ŸÖÿ≥ÿßŸÅÿßÿ™ÿå ŸÖÿ´ÿßŸÑ: system vendor)"
        required: false
        default: "system vendor"
      release_tag:
        description: "Ÿàÿ≥ŸÖ ÿßŸÑÿ•ÿµÿØÿßÿ± (ŸÖÿ´ÿßŸÑ: v1.0.0, v1.0.1)"
        required: true
        default: "v1.0.0"

permissions:
  contents: write

jobs:
  extract-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # ŸÑÿ™ÿ≠ŸÖŸäŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑtags
      
    - name: Check initial disk space
      run: |
        echo "üíæ Initial disk space:"
        df -h

    - name: Get existing tags and generate unique tag
      run: |
        # ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑtags ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ©
        git fetch --tags
        EXISTING_TAGS=$(git tag -l | tr '\n' ' ')
        echo "üè∑Ô∏è Existing tags: $EXISTING_TAGS"
        
        # ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑtag ŸÖŸÜ ÿßŸÑŸÖÿØÿÆŸÑÿßÿ™ ÿ£Ÿà ÿ•ŸÜÿ¥ÿßÿ° Ÿàÿßÿ≠ÿØ ŸÅÿ±ŸäÿØ
        INPUT_TAG="${{ github.event.inputs.release_tag }}"
        CLEAN_TAG=$(echo "$INPUT_TAG" | tr ' ' '-' | tr -cd '[:alnum:]-._')
        
        # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑtag ŸÖŸàÿ¨ŸàÿØÿßŸã Ÿàÿ•ŸÜÿ¥ÿßÿ° Ÿàÿßÿ≠ÿØ ŸÅÿ±ŸäÿØ
        if git rev-parse "$CLEAN_TAG" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Tag $CLEAN_TAG already exists, generating unique tag..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          UNIQUE_TAG="${CLEAN_TAG}-${TIMESTAMP}"
          echo "üÜï Unique tag: $UNIQUE_TAG"
          FINAL_TAG="$UNIQUE_TAG"
        else
          echo "‚úÖ Tag $CLEAN_TAG is available"
          FINAL_TAG="$CLEAN_TAG"
        fi
        
        echo "FINAL_TAG=$FINAL_TAG" >> $GITHUB_ENV
        echo "üéØ Final tag to use: $FINAL_TAG"

    - name: Install essential tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          unzip \
          curl \
          lz4 \
          android-sdk-libsparse-utils \
          python3

    - name: Download lpunpack.py
      run: |
        curl -s -O https://raw.githubusercontent.com/Samo1408/Image-Extractor/main/lpunpack.py
        echo "‚úÖ lpunpack.py downloaded"

    - name: Set partition names and artifact name
      run: |
        if [ -n "${{ github.event.inputs.partitions_to_extract }}" ]; then
          TARGET_PARTITIONS="${{ github.event.inputs.partitions_to_extract }}"
          ARTIFACT_NAME=$(echo "$TARGET_PARTITIONS" | tr ' ' '-' | cut -c1-50)
        else
          TARGET_PARTITIONS="system vendor"
          ARTIFACT_NAME="system-vendor"
        fi
        
        echo "TARGET_PARTITIONS=$TARGET_PARTITIONS" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
        
        echo "‚úÖ Partitions to extract: $TARGET_PARTITIONS"
        echo "üìÅ Artifact name: $ARTIFACT_NAME"
        echo "üè∑Ô∏è Release tag: $FINAL_TAG"

    - name: Download and extract firmware
      run: |
        mkdir -p firmware
        cd firmware
        curl -L -o firmware.zip "${{ github.event.inputs.zip_url }}"
        echo "üì¶ Downloaded file"
        ls -lh firmware.zip

    - name: Extract ZIP and process AP file
      run: |
        cd firmware
        unzip -o firmware.zip -d extracted_zip/
        rm -f firmware.zip
        
        AP_FILE=$(find extracted_zip/ -name "AP*.tar.md5" | head -1)
        if [ -n "$AP_FILE" ]; then
          cp "$AP_FILE" ap_file.tar.md5
          echo "‚úÖ Found AP file"
        else
          echo "‚ùå ERROR: No AP file found"
          exit 1
        fi
        rm -rf extracted_zip/

    - name: Extract AP and handle super.img
      run: |
        cd firmware
        tar -xf ap_file.tar.md5
        rm -f ap_file.tar.md5
        
        if [ -f "super.img.lz4" ]; then
          echo "‚úÖ super.img.lz4 is ready"
        else
          SUPER_FILE=$(find . -type f -name "super.img.lz4" | head -1)
          if [ -n "$SUPER_FILE" ] && [ "$SUPER_FILE" != "./super.img.lz4" ]; then
            cp "$SUPER_FILE" super.img.lz4
            echo "‚úÖ Found and copied super.img.lz4"
          else
            echo "‚ùå ERROR: No super.img.lz4 found"
            exit 1
          fi
        fi

    - name: Decompress and convert super.img
      run: |
        cd firmware
        lz4 -d super.img.lz4 super.img.sparse
        rm -f super.img.lz4
        simg2img super.img.sparse super.img.raw
        rm -f super.img.sparse
        echo "‚úÖ super.img.raw ready"

    - name: Extract partitions using lpunpack
      run: |
        cd firmware
        mkdir -p partitions
        python3 ../lpunpack.py super.img.raw partitions/
        echo "üìÇ Partitions extracted:"
        ls -la partitions/

    - name: Filter requested partitions
      run: |
        cd firmware/partitions
        
        echo "üîß Filtering partitions. Keeping only: $TARGET_PARTITIONS"
        
        for partition in *.img; do
          partition_name=$(basename "$partition" .img)
          if echo "$TARGET_PARTITIONS" | grep -qw "$partition_name"; then
            echo "‚úÖ Keeping: $partition"
          else
            echo "üóëÔ∏è Deleting: $partition"
            rm -f "$partition"
          fi
        done

    - name: Compress partitions
      run: |
        cd firmware/partitions
        
        echo "üîß Compressing partitions..."
        for part in $TARGET_PARTITIONS; do
          if [ -f "${part}.img" ]; then
            echo "üì¶ Compressing ${part}.img"
            gzip -1 -c "${part}.img" > "${part}.img.gz"
            rm -f "${part}.img"
            ls -lh "${part}.img.gz"
          fi
        done

    - name: Create final package with absolute path
      run: |
        cd firmware/partitions
        
        FINAL_FILE="/tmp/$ARTIFACT_NAME-$FINAL_TAG.tar.gz"
        
        if ls *.gz 1> /dev/null 2>&1; then
          echo "üì¶ Creating final package: $FINAL_FILE"
          tar -czf "$FINAL_FILE" ./*.gz
          echo "‚úÖ Package created successfully"
          ls -lh "$FINAL_FILE"
          echo "FINAL_FILE=$FINAL_FILE" >> $GITHUB_ENV
        else
          echo "‚ùå No files to package"
          exit 1
        fi

    - name: Create GitHub Release with unique tag
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.FINAL_TAG }}
        release_name: "Partitions ${{ env.ARTIFACT_NAME }} - ${{ env.FINAL_TAG }}"
        body: |
          # Partitions Extracted: ${{ env.TARGET_PARTITIONS }}
          
          ## üîß ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ•ÿµÿØÿßÿ±:
          - **ÿßŸÑŸÖŸÅÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿ±ÿ¨ÿ©:** ${{ env.TARGET_PARTITIONS }}
          - **Ÿàÿ≥ŸÖ ÿßŸÑÿ•ÿµÿØÿßÿ±:** ${{ env.FINAL_TAG }}
          - **ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ°:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **ÿßŸÑŸÖŸÜÿµÿ©:** Samsung Super.img
          
          ## üìã ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ:
          1. ÿ≠ŸÖŸÑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ∂ÿ∫Ÿàÿ∑
          2. ŸÅŸÉ ÿßŸÑÿ∂ÿ∫ÿ∑: `tar -xzf ${{ env.ARTIFACT_NAME }}-${{ env.FINAL_TAG }}.tar.gz`
          3. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖŸÑŸÅÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑÿ≠ÿßÿ¨ÿ©
          
          ## ‚ö†Ô∏è ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:
          - ÿ™ŸÖ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ° ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã via GitHub Actions
          - ÿßŸÑŸàÿ≥ŸÖ ŸÅÿ±ŸäÿØ: ${{ env.FINAL_TAG }}
        draft: false
        prerelease: false

    - name: Upload to Release
      run: |
        UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
        UPLOAD_URL=$(echo "$UPLOAD_URL" | sed 's/{.*}//')
        echo "üîó Upload URL: $UPLOAD_URL"
        
        if [ ! -f "$FINAL_FILE" ]; then
          echo "‚ùå File not found: $FINAL_FILE"
          exit 1
        fi
        
        echo "üì§ Uploading file: $FINAL_FILE"
        echo "üìä File size: $(ls -lh "$FINAL_FILE" | awk '{print $5}')"
        
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          -H "Accept: application/vnd.github.v3+json" \
          -T "$FINAL_FILE" \
          "$UPLOAD_URL?name=$ARTIFACT_NAME-$FINAL_TAG.tar.gz"
        
        echo "‚úÖ ÿ™ŸÖ ÿßŸÑÿ±ŸÅÿπ ÿ®ŸÜÿ¨ÿßÿ≠!"

    - name: Create and upload instructions
      run: |
        cat > INSTRUCTIONS.md << EOF
        # üìö ÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ
        
        ## ÿßŸÑŸÖŸÅÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿ±ÿ¨ÿ©:
        $TARGET_PARTITIONS
        
        ## ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ•ÿµÿØÿßÿ±:
        - ÿßŸÑŸàÿ≥ŸÖ: $FINAL_TAG
        - ÿßŸÑÿ™ÿßÿ±ŸäÿÆ: $(date)
        - ÿßŸÑÿ≠ÿ¨ŸÖ: $(ls -lh "$FINAL_FILE" | awk '{print $5}')
        
        ## ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ:
        \`\`\`bash
        # ŸÅŸÉ ÿßŸÑÿ∂ÿ∫ÿ∑
        tar -xzf $ARTIFACT_NAME-$FINAL_TAG.tar.gz
        
        # ŸÅŸÉ ÿ∂ÿ∫ÿ∑ ÿßŸÑŸÖŸÅÿßÿ™ ÿßŸÑŸÅÿ±ÿØŸäÿ©
        for f in *.img.gz; do
          gunzip -c "\$f" > "\${f%.gz}"
        done
        \`\`\`
        EOF
        
        UPLOAD_URL=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed 's/{.*}//')
        
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: text/markdown" \
          -H "Accept: application/vnd.github.v3+json" \
          -T "INSTRUCTIONS.md" \
          "$UPLOAD_URL?name=INSTRUCTIONS.md"

    - name: Upload to Artifacts as backup
      uses: actions/upload-artifact@v4
      with:
        name: partitions-${{ env.ARTIFACT_NAME }}-${{ env.FINAL_TAG }}
        path: ${{ env.FINAL_FILE }}
        retention-days: 7

    - name: Create git tag
      run: |
        # ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑtag ŸÅŸä ÿßŸÑrepository
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$FINAL_TAG" -m "Partitions release: $TARGET_PARTITIONS - $FINAL_TAG"
        git push origin "$FINAL_TAG"
        echo "‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸàÿ≥ŸÖ ŸÅŸä Git: $FINAL_TAG"

    - name: Cleanup
      run: |
        rm -rf firmware
        rm -f lpunpack.py
        rm -f INSTRUCTIONS.md
        rm -f /tmp/*.tar.gz
        echo "üßπ ÿ™ŸÖ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ"

    - name: Success message
      run: |
        echo "üéâ ÿßŸÑÿπŸÖŸÑŸäÿ© ÿßŸÉÿ™ŸÖŸÑÿ™ ÿ®ŸÜÿ¨ÿßÿ≠!"
        echo "üöÄ ÿ™ŸÖ ÿßŸÑÿ±ŸÅÿπ ÿ•ŸÑŸâ Releases: $ARTIFACT_NAME-$FINAL_TAG"
        echo "üì• ÿßŸÑŸÖŸÅÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿ±ÿ¨ÿ©: $TARGET_PARTITIONS"
        echo "üè∑Ô∏è Ÿàÿ≥ŸíŸÖ ÿßŸÑÿ•ÿµÿØÿßÿ±: $FINAL_TAG"
        echo "üìé ÿ±ÿßÿ®ÿ∑ ÿßŸÑRelease: https://github.com/$GITHUB_REPOSITORY/releases/tag/$FINAL_TAG"
        echo "üîó ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ: https://github.com/$GITHUB_REPOSITORY/releases/download/$FINAL_TAG/$ARTIFACT_NAME-$FINAL_TAG.tar.gz"