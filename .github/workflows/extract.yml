name: Extract Samsung Partitions /any file

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: "رابط الملف المضغوط .zip الذي يحتوي على AP.tar.md5"
        required: true
      extraction_mode:
        description: "نوع الاستخراج"
        type: choice
        options:
        - "partitions"
        - "boot"
        - "recovery"
        - "system_files"
        default: "partitions"
      partitions_to_extract:
        description: "المفات المطلوبة (للوضع partitions فقط)"
        required: false
        default: "system vendor"
      system_files_to_extract:
        description: "الملفات المطلوبة من system (للوضع system_files فقط)"
        required: false
        default: "build.prop floating_features.xml priv-app"
      release_tag:
        description: "وسم الإصدار"
        required: true
        default: "v1.0.0"

permissions:
  contents: write

jobs:
  extract-files:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Check initial disk space
      run: |
        echo "💾 Initial disk space:"
        df -h

    - name: Generate unique tag
      run: |
        git fetch --tags
        INPUT_TAG="${{ github.event.inputs.release_tag }}"
        CLEAN_TAG=$(echo "$INPUT_TAG" | tr ' ' '-' | tr -cd '[:alnum:]-._')
        
        if git rev-parse "$CLEAN_TAG" >/dev/null 2>&1; then
          echo "⚠️ Tag $CLEAN_TAG exists, generating unique tag..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FINAL_TAG="${CLEAN_TAG}-${TIMESTAMP}"
        else
          FINAL_TAG="$CLEAN_TAG"
        fi
        
        echo "FINAL_TAG=$FINAL_TAG" >> $GITHUB_ENV
        echo "EXTRACTION_MODE=${{ github.event.inputs.extraction_mode }}" >> $GITHUB_ENV
        echo "🎯 Mode: ${{ github.event.inputs.extraction_mode }}, Tag: $FINAL_TAG"

    - name: Install essential tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          unzip \
          curl \
          lz4 \
          android-sdk-libsparse-utils \
          python3 \
          simg2img \
          img2simg \
          e2fsprogs

    - name: Download lpunpack.py
      run: |
        curl -s -O https://raw.githubusercontent.com/Samo1408/Image-Extractor/main/lpunpack.py
        echo "✅ lpunpack.py downloaded"

    - name: Download and extract firmware
      run: |
        mkdir -p firmware
        cd firmware
        curl -L -o firmware.zip "${{ github.event.inputs.zip_url }}"
        echo "📦 Downloaded file"
        ls -lh firmware.zip

    - name: Extract ZIP and find files
      run: |
        cd firmware
        unzip -o firmware.zip -d extracted_zip/
        rm -f firmware.zip
        
        echo "📁 Files in ZIP:"
        find extracted_zip/ -type f -name "*.tar.md5" | head -10
        
        # البحث عن ملف AP
        AP_FILE=$(find extracted_zip/ -name "AP*.tar.md5" | head -1)
        if [ -n "$AP_FILE" ]; then
          cp "$AP_FILE" ap_file.tar.md5
          echo "✅ Found AP file: $AP_FILE"
        else
          echo "❌ ERROR: No AP file found"
          exit 1
        fi
        
        # البحث عن ملفات boot و recovery مباشرة في ZIP
        BOOT_FILE=$(find extracted_zip/ -name "boot.img*" | head -1)
        RECOVERY_FILE=$(find extracted_zip/ -name "recovery.img*" | head -1)
        
        if [ -n "$BOOT_FILE" ]; then
          echo "✅ Found boot file: $BOOT_FILE"
          echo "BOOT_FILE=$BOOT_FILE" >> $GITHUB_ENV
        fi
        
        if [ -n "$RECOVERY_FILE" ]; then
          echo "✅ Found recovery file: $RECOVERY_FILE"
          echo "RECOVERY_FILE=$RECOVERY_FILE" >> $GITHUB_ENV
        fi

    - name: Extract AP and prepare files based on mode
      run: |
        cd firmware
        
        # استخراج AP.tar.md5
        tar -xf ap_file.tar.md5
        rm -f ap_file.tar.md5
        
        echo "📁 Files in AP.tar.md5:"
        ls -la | grep -E "(boot|recovery|super)\\.img" || ls -la | head -15

    - name: Handle boot.img extraction mode
      if: env.EXTRACTION_MODE == 'boot'
      run: |
        cd firmware
        
        # البحث عن boot.img
        if [ -f "boot.img.lz4" ]; then
          echo "✅ Found boot.img.lz4 directly"
          BOOT_SOURCE="boot.img.lz4"
        else
          BOOT_SOURCE=$(find . -name "boot.img.lz4" -o -name "boot.img" | head -1)
          if [ -n "$BOOT_SOURCE" ]; then
            echo "✅ Found boot source: $BOOT_SOURCE"
          else
            echo "❌ ERROR: No boot.img found"
            exit 1
          fi
        fi
        
        # فك ضغط إذا كان مضغوطاً
        if [[ "$BOOT_SOURCE" == *.lz4 ]]; then
          echo "🔓 Decompressing boot.img.lz4..."
          lz4 -d "$BOOT_SOURCE" boot.img
          echo "✅ boot.img ready"
        else
          cp "$BOOT_SOURCE" boot.img
        fi
        
        ls -lh boot.img
        echo "BOOT_FINAL=boot.img" >> $GITHUB_ENV

    - name: Handle recovery.img extraction mode
      if: env.EXTRACTION_MODE == 'recovery'
      run: |
        cd firmware
        
        # البحث عن recovery.img
        if [ -f "recovery.img.lz4" ]; then
          echo "✅ Found recovery.img.lz4 directly"
          RECOVERY_SOURCE="recovery.img.lz4"
        else
          RECOVERY_SOURCE=$(find . -name "recovery.img.lz4" -o -name "recovery.img" | head -1)
          if [ -n "$RECOVERY_SOURCE" ]; then
            echo "✅ Found recovery source: $RECOVERY_SOURCE"
          else
            echo "❌ ERROR: No recovery.img found"
            exit 1
          fi
        fi
        
        # فك ضغط إذا كان مضغوطاً
        if [[ "$RECOVERY_SOURCE" == *.lz4 ]]; then
          echo "🔓 Decompressing recovery.img.lz4..."
          lz4 -d "$RECOVERY_SOURCE" recovery.img
          echo "✅ recovery.img ready"
        else
          cp "$RECOVERY_SOURCE" recovery.img
        fi
        
        ls -lh recovery.img
        echo "RECOVERY_FINAL=recovery.img" >> $GITHUB_ENV

    - name: Handle partitions extraction mode
      if: env.EXTRACTION_MODE == 'partitions' || env.EXTRACTION_MODE == 'system_files'
      run: |
        cd firmware
        
        # البحث عن super.img.lz4
        if [ -f "super.img.lz4" ]; then
          echo "✅ Found super.img.lz4 directly"
        else
          SUPER_FILE=$(find . -name "super.img.lz4" | head -1)
          if [ -n "$SUPER_FILE" ]; then
            cp "$SUPER_FILE" super.img.lz4
            echo "✅ Found and copied super.img.lz4"
          else
            echo "❌ ERROR: No super.img.lz4 found"
            exit 1
          fi
        fi
        
        # فك ضغط وتحويل super.img
        lz4 -d super.img.lz4 super.img.sparse
        rm -f super.img.lz4
        simg2img super.img.sparse super.img.raw
        rm -f super.img.sparse
        echo "✅ super.img.raw ready"

    - name: Extract partitions from super.img
      if: env.EXTRACTION_MODE == 'partitions' || env.EXTRACTION_MODE == 'system_files'
      run: |
        cd firmware
        mkdir -p partitions
        python3 ../lpunpack.py super.img.raw partitions/
        echo "📂 Partitions extracted:"
        ls -la partitions/

    - name: Filter requested partitions
      if: env.EXTRACTION_MODE == 'partitions'
      run: |
        cd firmware/partitions
        
        TARGET_PARTITIONS="${{ github.event.inputs.partitions_to_extract }}"
        echo "🔧 Filtering partitions. Keeping only: $TARGET_PARTITIONS"
        
        for partition in *.img; do
          partition_name=$(basename "$partition" .img)
          if echo "$TARGET_PARTITIONS" | grep -qw "$partition_name"; then
            echo "✅ Keeping: $partition"
          else
            echo "🗑️ Deleting: $partition"
            rm -f "$partition"
          fi
        done

    - name: Extract system files from system partition
      if: env.EXTRACTION_MODE == 'system_files'
      run: |
        cd firmware/partitions
        
        # التأكد من وجود system.img
        if [ ! -f "system.img" ]; then
          echo "❌ ERROR: system.img not found in partitions"
          ls -la
          exit 1
        fi
        
        echo "🔧 Mounting system.img to extract files..."
        
        # إنشاء مجلدات للmount
        mkdir -p system_mount
        mkdir -p extracted_files
        
        # تحويل system.img إلى raw إذا لزم الأمر
        if file system.img | grep -q "sparse"; then
          echo "📦 Converting sparse system.img to raw..."
          simg2img system.img system.raw
          SYSTEM_IMAGE="system.raw"
        else
          SYSTEM_IMAGE="system.img"
        fi
        
        # محاولة mount النظام
        sudo mount -o ro,loop "$SYSTEM_IMAGE" system_mount
        
        if mountpoint -q system_mount; then
          echo "✅ System mounted successfully"
          
          # استخراج الملفات المطلوبة
          FILES_TO_EXTRACT="${{ github.event.inputs.system_files_to_extract }}"
          echo "📂 Extracting files: $FILES_TO_EXTRACT"
          
          for file_path in $FILES_TO_EXTRACT; do
            if [ -e "system_mount/$file_path" ]; then
              echo "✅ Extracting: $file_path"
              
              # إنشاء هيكل المجلدات
              mkdir -p "extracted_files/$(dirname "$file_path")"
              
              # نسخ الملف أو المجلد
              if [ -d "system_mount/$file_path" ]; then
                cp -r "system_mount/$file_path" "extracted_files/$(dirname "$file_path")/"
                echo "📁 Copied directory: $file_path"
              else
                cp "system_mount/$file_path" "extracted_files/$(dirname "$file_path")/"
                echo "📄 Copied file: $file_path"
              fi
            else
              echo "⚠️ Warning: $file_path not found in system"
            fi
          done
          
          # unmount النظام
          sudo umount system_mount
          
          echo "📁 Extracted files structure:"
          find extracted_files -type f | head -20
          
        else
          echo "❌ ERROR: Failed to mount system.img"
          exit 1
        fi
        
        # تنظيف
        rm -rf system_mount
        if [ -f "system.raw" ]; then
          rm -f system.raw
        fi

    - name: Extract specific files using debugfs (alternative method)
      if: env.EXTRACTION_MODE == 'system_files'
      run: |
        cd firmware/partitions
        
        # طريقة بديلة باستخدام debugfs لاستخراج الملفات
        if [ -f "system.img" ]; then
          echo "🔧 Using debugfs to extract files (alternative method)..."
          mkdir -p debugfs_extracted
          
          FILES_TO_EXTRACT="${{ github.event.inputs.system_files_to_extract }}"
          
          for file_path in $FILES_TO_EXTRACT; do
            echo "🔍 Attempting to extract: $file_path"
            
            # استخراج باستخدام debugfs
            if debugfs -R "dump $file_path debugfs_extracted/$(basename "$file_path")" system.img 2>/dev/null; then
              if [ -s "debugfs_extracted/$(basename "$file_path")" ]; then
                echo "✅ Successfully extracted: $file_path"
              else
                echo "⚠️ File extracted but empty: $file_path"
                rm -f "debugfs_extracted/$(basename "$file_path")"
              fi
            else
              echo "❌ Failed to extract: $file_path"
            fi
          done
          
          # دمج الملفات المستخرجة
          if [ -d "debugfs_extracted" ] && [ "$(ls -A debugfs_extracted)" ]; then
            cp -r debugfs_extracted/* extracted_files/ 2>/dev/null || true
          fi
          
          rm -rf debugfs_extracted
        fi

    - name: Compress files based on mode
      run: |
        cd firmware
        mkdir -p output
        
        case "$EXTRACTION_MODE" in
          "boot")
            echo "📦 Handling boot mode..."
            cp boot.img output/
            gzip output/boot.img
            echo "BOOT_FINAL=output/boot.img.gz" >> $GITHUB_ENV
            ARTIFACT_NAME="boot"
            ;;
          "recovery")
            echo "📦 Handling recovery mode..."
            cp recovery.img output/
            gzip output/recovery.img
            echo "RECOVERY_FINAL=output/recovery.img.gz" >> $GITHUB_ENV
            ARTIFACT_NAME="recovery"
            ;;
          "partitions")
            echo "📦 Handling partitions mode..."
            cd partitions
            TARGET_PARTITIONS="${{ github.event.inputs.partitions_to_extract }}"
            for part in $TARGET_PARTITIONS; do
              if [ -f "${part}.img" ]; then
                echo "📦 Compressing ${part}.img"
                gzip -c "${part}.img" > "../output/${part}.img.gz"
                ls -lh "../output/${part}.img.gz"
              fi
            done
            ARTIFACT_NAME=$(echo "$TARGET_PARTITIONS" | tr ' ' '-' | cut -c1-50)
            ;;
          "system_files")
            echo "📦 Handling system files mode..."
            cd partitions/extracted_files
            tar -czf ../../output/system_files.tar.gz .
            echo "📁 System files packaged"
            ls -lh ../../output/system_files.tar.gz
            ARTIFACT_NAME="system-files"
            ;;
        esac
        
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
        echo "📁 Output files:"
        ls -la output/

    - name: Create final package
      run: |
        cd firmware/output
        
        FINAL_FILE="/tmp/$ARTIFACT_NAME-$FINAL_TAG.tar.gz"
        
        if ls * 1> /dev/null 2>&1; then
          echo "📦 Creating final package: $FINAL_FILE"
          tar -czf "$FINAL_FILE" ./*
          echo "✅ Package created successfully"
          ls -lh "$FINAL_FILE"
          echo "FINAL_FILE=$FINAL_FILE" >> $GITHUB_ENV
        else
          echo "❌ No files to package"
          exit 1
        fi

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.FINAL_TAG }}
        release_name: "${{ env.EXTRACTION_MODE }} ${{ env.ARTIFACT_NAME }} - ${{ env.FINAL_TAG }}"
        body: |
          # ${{ env.EXTRACTION_MODE }} Extraction - ${{ env.FINAL_TAG }}
          
          ## 🔧 معلومات الإصدار:
          - **النوع:** ${{ env.EXTRACTION_MODE }}
          - **الملفات:** ${{ env.ARTIFACT_NAME }}
          - **الوسم:** ${{ env.FINAL_TAG }}
          - **التاريخ:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 📋 محتويات الحزمة:
          ${{ env.ARTIFACT_NAME }}
          
          ## ⚡ طريقة الاستخدام:
          \`\`\`bash
          tar -xzf ${{ env.ARTIFACT_NAME }}-${{ env.FINAL_TAG }}.tar.gz
          \`\`\`
        draft: false
        prerelease: false

    - name: Upload to Release
      run: |
        UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
        UPLOAD_URL=$(echo "$UPLOAD_URL" | sed 's/{.*}//')
        
        if [ ! -f "$FINAL_FILE" ]; then
          echo "❌ File not found: $FINAL_FILE"
          exit 1
        fi
        
        echo "📤 Uploading: $FINAL_FILE"
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          -H "Accept: application/vnd.github.v3+json" \
          -T "$FINAL_FILE" \
          "$UPLOAD_URL?name=$ARTIFACT_NAME-$FINAL_TAG.tar.gz"
        
        echo "✅ تم الرفع بنجاح!"

    - name: Upload to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXTRACTION_MODE }}-${{ env.ARTIFACT_NAME }}-${{ env.FINAL_TAG }}
        path: ${{ env.FINAL_FILE }}
        retention-days: 7

    - name: Cleanup
      run: |
        rm -rf firmware
        rm -f lpunpack.py
        rm -f /tmp/*.tar.gz
        echo "🧹 تم التنظيف"

    - name: Success message
      run: |
        echo "🎉 العملية اكتملت بنجاح!"
        echo "🚀 النوع: $EXTRACTION_MODE"
        echo "📁 الملفات: $ARTIFACT_NAME"
        echo "🏷️ الوسم: $FINAL_TAG"
        echo "📎 الرابط: https://github.com/$GITHUB_REPOSITORY/releases/tag/$FINAL_TAG"